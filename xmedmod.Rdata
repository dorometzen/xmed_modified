function (data, iv, mediators, dv, covariates = NULL, type = "lasso", 
          nfolds = 10, epsilon = 0.001, seed = NULL) 
{
  # This is a modified version of the xmed function from the regsem package function
  # https://cran.r-project.org/web/packages/regsem/regsem.pdf
  # We applied this in our prepint: 
  # 1. deleted lambda = exp(seq(log(0.001), log(5), length.out = 100)) for a and b parameter. We want to use the default lambda sequence of glmnet. 
  # 2. instead of mediator.mat there is now mediator.a.mat (only mediators) and mediators.b.mat (mediators and iv). This was done because we wanted to control for the iv in 
  #    cv.b.lasso. All instances in the function calling mediator.mat have been changed accordingly. 
  # 3. changed the penatly factor in cv.b.lasso to penalty.factor = c(rep(1, ncol(mediators.b.mat) - 1), 0)). We do not want to penalize the iv. 
  # 4. When saving b.coefs, we add [1:ncol(mediators.a.mat)], so only coefficients for the mediators are extracted
  
  res <- list()
  Data <- data
  if (type == "lasso") {
    alpha = 1
  } else if (type == "ridge") {
    alpha = 0
  } else if (type == "enet") {
    alpha = 0.5
  }
  var.check = function(data) {
    data = as.data.frame(data)
    num.response.options = flag = integer(ncol(data))
    for (i in 1:ncol(data)) {
      num.response.options[i] = flag[i] = NA
      num.response.options[i] = length(unique(data[, i]))
      if (is.factor(data[, i]) & num.response.options[i] > 
          2) {
        flag[i] = 2
      }
      else if (num.response.options[i] == 2) {
        flag[i] = 1
      }
      else if (num.response.options[i] != 2) {
        flag[i] = 0
      }
    }
    return(flag)
  }
  check.out <- var.check(data[, c(iv, mediators, dv)])
  if (any(check.out == 2)) {
    stop("Factor variables with > 2 response options need to be recoded as integer or numeric variables")
  }
  data.proc <- caret::preProcess(Data[, c(iv, mediators, dv)])
  data2 <- predict(data.proc, Data[, c(iv, mediators, dv)])
  iv.mat <- as.matrix(data2[, iv])
  mediators.b.mat <- as.matrix(data2[, c(mediators,iv)])
  mediators.a.mat <- as.matrix(data2[, mediators])
  dv.mat <- as.matrix(data2[, dv])
  if (sum(is.na(iv.mat)) > 0 | sum(is.na(mediators.a.mat)) > 
      0 | sum(is.na(dv.mat)) > 0) {
    stop("Missing values are not allowed")
  }
  if (var.check(dv.mat) == 0) {
    dv.class = "gaussian"
  }
  else if (var.check(dv.mat) == 1) {
    dv.class = "binomial"
  }
  if (!is.null(seed)) {
    set.seed(seed)
  }
  b.cv.lasso = glmnet::cv.glmnet(mediators.b.mat, dv.mat, alpha = alpha, 
                                 family = dv.class, standardize = FALSE, nfolds = nfolds, penalty.factor = c(rep(1, 
                                                                                                                 ncol(mediators.b.mat) - 1), 0))
  b.coefs = coef(b.cv.lasso, s = b.cv.lasso$lambda.min)[-1, 
                                                        1][1:ncol(mediators.a.mat)]
  a.cv.lasso = a.fit.lasso = vector("list", ncol(mediators.a.mat))
  a.lambda = numeric(ncol(mediators.a.mat))
  for (i in 1:ncol(mediators.a.mat)) {
    if (var.check(mediators.a.mat[, i]) == 0) {
      med.class = "gaussian"
    }
    else if (var.check(mediators.a.mat[, i]) == 1) {
      med.class = "binomial"
    }
    if (!is.null(seed)) {
      set.seed(seed)
    }
    a.cv.lasso[[i]] = glmnet::cv.glmnet(as.matrix(cbind(rnorm(nrow(data), 
                                                              1, 1e-04), iv.mat)), mediators.a.mat[, i], alpha = alpha, 
                                        family = med.class, standardize = FALSE, nfolds = nfolds, 
                                        intercept = F, penalty.factor = c(0, 1))
    a.lambda[i] = a.cv.lasso[[i]]$lambda.min
  }
  a.coefs = numeric(length(b.coefs))
  for (i in 1:length(a.coefs)) {
    if (!is.null(a.cv.lasso[[i]])) {
      a.coefs[i] = coef(a.cv.lasso[[i]], s = a.cv.lasso[[i]]$lambda.min)[-1, 
                                                                         1][2]
    }
  }
  names(a.coefs) = mediators
  res$a.coefs <- a.coefs
  res$b.coefs <- b.coefs
  indirect = a.coefs * b.coefs
  selected <- names(indirect[abs(indirect) > epsilon])
  indirect <- as.data.frame(indirect)
  indirect = round(indirect, 4)
  indirect[abs(indirect) < epsilon] = 0
  indirect <- t(indirect)
  indirect[abs(indirect) >= epsilon] = as.numeric(indirect[abs(indirect) >= 
                                                             epsilon])
  res$a.lambda = a.lambda
  res$b.lambda = b.cv.lasso$lambda.min
  res$selected = selected
  res$indirect <- indirect
  res$call <- match.call()
  class(res) <- "xmed"
  return(res)
}
